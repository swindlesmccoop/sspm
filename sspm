#!/bin/sh

#TODO: DELETE OLD PASS ON REPLACEMENT

function newpass {
echo "What site?"
read -r SITE
PASSLENGTH=$(shuf -i 15-30 -n 1)
PASS=$(tr -dc 'A-Za-z0-9!"#$&'\''()*+,-./:;<=>?@[\]^_`{|}~' </dev/urandom | head -c "$PASSLENGTH")
printf "[$SITE]\n$PASS\n\n" >> ~/.passwords
echo "$PASS"
}

function append {
    echo "What site?"
    read -r APPEND_SITE
    echo "What is the password?"
    read -r APPEND_PASS
    printf "[$APPEND_SITE]\n$APPEND_PASS\n\n" >> ~/.passwords && echo "Password for $APPEND_SITE appended!"
}

function delete {
    echo "What site?"
    read -r REMOVEPASS
    sed "/$REMOVEPASS/,+2 d" ~/.passwords >> ~/.passwords && echo "Password for $REMOVEPASS removed!"
}

function replace {
    echo "What site?"
    read -r REPLACESITE
    sed "/$REPLACESITE/,+2 d" ~/.passwords >> ~/.passwords
    echo "New password?"
    read -r NEWPASS
    printf "[$REPLACESITE]\n$NEWPASS\n\n" >> ~/.passwords    
}

function sspm_help {
printf "Shell Script Password Manager (sspm) by Layne Cooper\n\nUsage:\n\nsspm [site]: Prints password for [site]\na, -a, --append: (A)ppend new, custom password\nd, -d, --delete: (D)elete a password\nh, -h, --help: Display this (h)elp message\nn, -n, --new: Generate (n)ew password\nr, -r, --replace: (R)eplace a password with a custom one\n" && exit 1
}

#if no parameters supplied, print the help message
if [ $# -eq 0 ]; then sspm_help; fi

case "$1" in
    a) append ;;
    -a) append ;;
    --append) append ;;
    --add) append ;;
    n) newpass ;;
    -n) newpass ;;
    --new) newpass ;;
    h) sspm_help ;;
    -h) sspm_help ;;
    --help) sspm_help ;;
    d) delete ;;
    -d) delete ;;
    --delete) delete ;;
    r) replace ;;
    -r) replace ;;
    --replace) replace ;;
    *) sed -n "/$1/{n;p}" ~/.passwords
esac
