#!/bin/bash

#TODO: DELETE OLD PASS ON REPLACEMENT

function newpass {
    PASSLENGTH=$(shuf -i 15-30 -n 1)
    PASS=$(tr -dc 'A-Za-z0-9!"#$&'\''()*+,-./:;<=>?@[\]^_`{|}~' </dev/urandom | head -c "$PASSLENGTH")
    printf "[$2]\n$PASS\n\n" >> $HOME/.passwords
    echo "$PASS"
}

function append {
    echo "What is the password?"
    read -r APPEND_PASS
    printf "[$2]\n$APPEND_PASS\n\n" >> $HOME/.passwords && echo "Password for $2 appended!"
}

function delete {
    sed "/$2/,+2 d" ~/.passwords >> $HOME/.passwords && echo "Password for $2 removed!"
}

function replace {
    printf "Replacement function currently broken.\nPlease support development at\nhttps://gitlab.com/swindlesmccoop/sspm/\n"
    #awk "/[$2]/{n=3}; n {n--; next}; 1" ~/.passwords > ~/.passwords
    #echo "New password?"
    #read -r NEWPASS
    #printf "[$2]\n$NEWPASS\n\n" >> ~/.passwords    
}

function sspm_help {
printf "Shell Script Password Manager (sspm) by swindlesmccoop\n\nUsage: sspm [-adhnr] [site]\n\n[site]: Prints password for [site]\n-a, --append: (A)ppend new, custom password\n-d, --delete: (D)elete a password\n-h, --help: Display this (h)elp message\n-n, --new: Generate (n)ew password\n-r, --replace: (R)eplace a password with a custom one\n" && exit 1
}

#if no parameters supplied, print the help message
if [ $# -eq 0 ]; then sspm_help; fi

case "$1" in
    -a) append "$@" ;;
    --append) append "$@" ;;
    -n) newpass "$@" ;;
    --new) newpass "$@" ;;
    -h) sspm_help "$@" ;;
    --help) sspm_help "$@" ;;
    -d) delete "$@" ;;
    --delete) delete "$@" ;;
    -r) replace "$@" ;;
    --replace) replace "$@" ;;
    *) sed -n "/$1/{n;p}" ~/.passwords
esac
